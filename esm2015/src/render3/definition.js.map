{"version":3,"file":"definition.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/definition.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SimpleChange} from '../change_detection/change_detection_util';\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {PipeTransform} from '../change_detection/pipe_transform';\nimport {Provider} from '../core';\nimport {OnChanges, SimpleChanges} from '../metadata/lifecycle_hooks';\nimport {RendererType2} from '../render/api';\nimport {Type} from '../type';\nimport {resolveRendererType2} from '../view/util';\n\nimport {diPublic} from './di';\nimport {ComponentDef, ComponentDefFeature, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFeature, DirectiveDefListOrFactory, DirectiveType, DirectiveTypesOrFactory, PipeDef, PipeType, PipeTypesOrFactory} from './interfaces/definition';\nimport {CssSelectorList, SelectorFlags} from './interfaces/projection';\n\n\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport function defineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: () => T | ({0: T} & any[]); /* trying to say T | [T, ...any] */\n\n  /**\n   * Static attributes to set on host element.\n   *\n   * Even indices: attribute name\n   * Odd indices: attribute value\n   */\n  attributes?: string[];\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  inputs?: {[P in keyof T]?: string};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string;\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link PublicFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  rendererType?: RendererType2;\n\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Defines the set of injectable objects that are visible to a Directive and its light DOM\n   * children.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   */\n  viewProviders?: Provider[];\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n}): never {\n  const type = componentDefinition.type;\n  const pipeTypes = componentDefinition.pipes !;\n  const directiveTypes = componentDefinition.directives !;\n  const def = <ComponentDef<any>>{\n    type: type,\n    diPublic: null,\n    factory: componentDefinition.factory,\n    template: componentDefinition.template || null !,\n    hostBindings: componentDefinition.hostBindings || null,\n    attributes: componentDefinition.attributes || null,\n    inputs: invertObject(componentDefinition.inputs),\n    outputs: invertObject(componentDefinition.outputs),\n    rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\n    exportAs: componentDefinition.exportAs,\n    onInit: type.prototype.ngOnInit || null,\n    doCheck: type.prototype.ngDoCheck || null,\n    afterContentInit: type.prototype.ngAfterContentInit || null,\n    afterContentChecked: type.prototype.ngAfterContentChecked || null,\n    afterViewInit: type.prototype.ngAfterViewInit || null,\n    afterViewChecked: type.prototype.ngAfterViewChecked || null,\n    onDestroy: type.prototype.ngOnDestroy || null,\n    onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n    directiveDefs: directiveTypes ?\n        () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                  .map(extractDirectiveDef) :\n        null,\n    pipeDefs: pipeTypes ?\n        () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n        null,\n    selectors: componentDefinition.selectors\n  };\n  const feature = componentDefinition.features;\n  feature && feature.forEach((fn) => fn(def));\n  return def as never;\n}\n\nexport function extractDirectiveDef(type: DirectiveType<any>& ComponentType<any>):\n    DirectiveDef<any>|ComponentDef<any> {\n  const def = type.ngComponentDef || type.ngDirectiveDef;\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return def;\n}\n\nexport function extractPipeDef(type: PipeType<any>): PipeDef<any> {\n  const def = type.ngPipeDef;\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return def;\n}\n\n\n\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n\ntype OnChangesExpando = OnChanges & {\n  __ngOnChanges_: SimpleChanges|null|undefined;\n  [key: string]: any;\n};\n\n/**\n * Creates an NgOnChangesFeature function for a component's features list.\n *\n * It accepts an optional map of minified input property names to original property names,\n * if any input properties have a public alias.\n *\n * The NgOnChangesFeature function that is returned decorates a component with support for\n * the ngOnChanges lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature({name: 'name'})]\n * });\n * ```\n *\n * @param inputPropertyNames Map of input property names, if they are aliased\n * @returns DirectiveDefFeature\n */\nexport function NgOnChangesFeature(inputPropertyNames?: {[key: string]: string}):\n    DirectiveDefFeature {\n  return function(definition: DirectiveDef<any>): void {\n    const inputs = definition.inputs;\n    const proto = definition.type.prototype;\n    // Place where we will store SimpleChanges if there is a change\n    Object.defineProperty(proto, PRIVATE_PREFIX, {value: undefined, writable: true});\n    for (let pubKey in inputs) {\n      const minKey = inputs[pubKey];\n      const propertyName = inputPropertyNames && inputPropertyNames[minKey] || pubKey;\n      const privateMinKey = PRIVATE_PREFIX + minKey;\n      // Create a place where the actual value will be stored and make it non-enumerable\n      Object.defineProperty(proto, privateMinKey, {value: undefined, writable: true});\n\n      const existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);\n\n      // create a getter and setter for property\n      Object.defineProperty(proto, minKey, {\n        get: function(this: OnChangesExpando) {\n          return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :\n                                                      this[privateMinKey];\n        },\n        set: function(this: OnChangesExpando, value: any) {\n          let simpleChanges = this[PRIVATE_PREFIX];\n          let isFirstChange = simpleChanges === undefined;\n          if (simpleChanges == null) {\n            simpleChanges = this[PRIVATE_PREFIX] = {};\n          }\n          simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);\n          (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :\n                                               this[privateMinKey] = value;\n        }\n      });\n    }\n\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n      definition.onInit = onChangesWrapper(definition.onInit);\n    }\n\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n  };\n\n  function onChangesWrapper(delegateHook: (() => void) | null) {\n    return function(this: OnChangesExpando) {\n      let simpleChanges = this[PRIVATE_PREFIX];\n      if (simpleChanges != null) {\n        this.ngOnChanges(simpleChanges);\n        this[PRIVATE_PREFIX] = null;\n      }\n      delegateHook && delegateHook.apply(this);\n    };\n  }\n}\n\n\nexport function PublicFeature<T>(definition: DirectiveDef<T>) {\n  definition.diPublic = diPublic;\n}\n\nconst EMPTY = {};\n\n/** Swaps the keys and values of an object. */\nfunction invertObject(obj: any): any {\n  if (obj == null) return EMPTY;\n  const newObj: any = {};\n  for (let minifiedKey in obj) {\n    newObj[obj[minifiedKey]] = minifiedKey;\n  }\n  return newObj;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport const defineDirective = defineComponent as any as<T>(directiveDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: () => T | ({0: T} & any[]); /* trying to say T | [T, ...any] */\n\n  /**\n   * Static attributes to set on host element.\n   *\n   * Even indices: attribute name\n   * Odd indices: attribute value\n   */\n  attributes?: string[];\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  inputs?: {[P in keyof T]?: string};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link PublicFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string;\n}) => never;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport function definePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string,\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>,\n\n  /** A factory for creating a pipe instance. */\n  factory: () => T,\n\n  /** Whether the pipe is pure. */\n  pure?: boolean\n}): never {\n  return (<PipeDef<T>>{\n    name: pipeDef.name,\n    n: pipeDef.factory,\n    pure: pipeDef.pure !== false,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  }) as never;\n}\n"]}