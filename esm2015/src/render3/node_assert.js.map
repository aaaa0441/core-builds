{"version":3,"file":"node_assert.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/node_assert.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,WAAW,EAAE,aAAa,EAAC,MAAM,UAAU,CAAC;;;;;;AAGpD,MAAM,yBAAyB,IAAW,EAAE,IAAe;IACzD,aAAa,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;IACpD,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,eAAe,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAC/D;;;;;;AAED,MAAM,oCAAoC,IAAW,EAAE,GAAG,KAAkB;IAC1E,aAAa,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;IACpD,uBAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IACrD,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,oBAAoB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAChF;;;;;AAED,kBAAkB,IAAe;IAC/B,EAAE,CAAC,CAAC,IAAI,sBAAwB,CAAC;QAAC,MAAM,CAAC,YAAY,CAAC;IACtD,EAAE,CAAC,CAAC,IAAI,qBAAuB,CAAC;QAAC,MAAM,CAAC,WAAW,CAAC;IACpD,EAAE,CAAC,CAAC,IAAI,gBAAkB,CAAC;QAAC,MAAM,CAAC,MAAM,CAAC;IAC1C,EAAE,CAAC,CAAC,IAAI,mBAAqB,CAAC;QAAC,MAAM,CAAC,SAAS,CAAC;IAChD,MAAM,CAAC,WAAW,CAAC;CACpB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertNotNull} from './assert';\nimport {LNode, LNodeType} from './interfaces/node';\n\nexport function assertNodeType(node: LNode, type: LNodeType) {\n  assertNotNull(node, 'should be called with a node');\n  assertEqual(node.type, type, `should be a ${typeName(type)}`);\n}\n\nexport function assertNodeOfPossibleTypes(node: LNode, ...types: LNodeType[]) {\n  assertNotNull(node, 'should be called with a node');\n  const found = types.some(type => node.type === type);\n  assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')}`);\n}\n\nfunction typeName(type: LNodeType): string {\n  if (type == LNodeType.Projection) return 'Projection';\n  if (type == LNodeType.Container) return 'Container';\n  if (type == LNodeType.View) return 'View';\n  if (type == LNodeType.Element) return 'Element';\n  return '<unknown>';\n}\n"]}