{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual} from './assert';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNodeFlags} from './interfaces/node';\nimport {HookData, LView, LifecycleStage, TView} from './interfaces/view';\n\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param index The index of the directive in LView.data\n * @param hooks The static hooks map on the directive def\n * @param tView The current TView\n */\nexport function queueInitHooks(\n    index: number, onInit: (() => void) | null, doCheck: (() => void) | null, tView: TView): void {\n  ngDevMode &&\n      assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n  if (onInit) {\n    (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n  }\n\n  if (doCheck) {\n    (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n    (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n  }\n}\n\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n */\nexport function queueLifecycleHooks(flags: number, currentView: LView): void {\n  const tView = currentView.tView;\n  if (tView.firstTemplatePass === true) {\n    const start = flags >> TNodeFlags.DirectiveStartingIndexShift;\n    const count = flags & TNodeFlags.DirectiveCountMask;\n    const end = start + count;\n\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = start; i < end; i++) {\n      const def: DirectiveDef<any> = tView.directives ![i];\n      queueContentHooks(def, tView, i);\n      queueViewHooks(def, tView, i);\n      queueDestroyHooks(def, tView, i);\n    }\n  }\n}\n\n/** Queues afterContentInit and afterContentChecked hooks on TView */\nfunction queueContentHooks(def: DirectiveDef<any>, tView: TView, i: number): void {\n  if (def.afterContentInit) {\n    (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n  }\n\n  if (def.afterContentChecked) {\n    (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n    (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n  }\n}\n\n/** Queues afterViewInit and afterViewChecked hooks on TView */\nfunction queueViewHooks(def: DirectiveDef<any>, tView: TView, i: number): void {\n  if (def.afterViewInit) {\n    (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n  }\n\n  if (def.afterViewChecked) {\n    (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n    (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n  }\n}\n\n/** Queues onDestroy hooks on TView */\nfunction queueDestroyHooks(def: DirectiveDef<any>, tView: TView, i: number): void {\n  if (def.onDestroy != null) {\n    (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n  }\n}\n\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param currentView The current view\n */\nexport function executeInitHooks(currentView: LView, tView: TView, creationMode: boolean): void {\n  if (currentView.lifecycleStage === LifecycleStage.Init) {\n    executeHooks(currentView.directives !, tView.initHooks, tView.checkHooks, creationMode);\n    currentView.lifecycleStage = LifecycleStage.AfterInit;\n  }\n}\n\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param currentView The current view\n */\nexport function executeHooks(\n    data: any[], allHooks: HookData | null, checkHooks: HookData | null,\n    creationMode: boolean): void {\n  const hooksToCall = creationMode ? allHooks : checkHooks;\n  if (hooksToCall) {\n    callHooks(data, hooksToCall);\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n */\nexport function callHooks(data: any[], arr: HookData): void {\n  for (let i = 0; i < arr.length; i += 2) {\n    (arr[i + 1] as() => void).call(data[arr[i] as number]);\n  }\n}\n"]}