{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../../packages/core/src/di/metadata.ts"],"names":[],"mappings":";;;;;;;;;;;AAWA,OAAO,EAAgB,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsDrE,MAAM,CAAC,qBAAM,MAAM,GAAoB,kBAAkB,CAAC,QAAQ,EAAE,UAAC,KAAU,IAAK,OAAA,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,EAAT,CAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;AA+C/F,MAAM,CAAC,qBAAM,QAAQ,GAAsB,kBAAkB,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;AA6C1E,MAAM,CAAC,qBAAM,IAAI,GAAkB,kBAAkB,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;AA8C9D,MAAM,CAAC,qBAAM,QAAQ,GAAsB,kBAAkB,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;AA8C1E,MAAM,CAAC,qBAAM,IAAI,GAAkB,kBAAkB,CAAC,MAAM,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ClassSansProvider, ConstructorProvider, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, StaticClassProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from '../di/provider';\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\nimport {EMPTY_ARRAY} from '../view/util';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n *\n */\nexport interface InjectDecorator {\n  /**\n   * @usageNotes\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Inject(\"MyEngine\") public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * A parameter decorator that specifies a dependency.\n   *\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Inject'}\n   *\n   * When `@Inject()` is not present, {@link Injector} will use the type annotation of the\n   * parameter.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   *\n   *\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n *\n */\nexport interface Inject { token: any; }\n\n/**\n * Inject decorator and metadata.\n *\n *\n * @Annotation\n */\nexport const Inject: InjectDecorator = makeParamDecorator('Inject', (token: any) => ({token}));\n\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n *\n */\nexport interface OptionalDecorator {\n  /**\n   * @usageNotes\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Optional() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * A parameter metadata that marks a dependency as optional.\n   * {@link Injector} provides `null` if the dependency is not found.\n   *\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   *\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n *\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n *\n * @Annotation\n */\nexport const Optional: OptionalDecorator = makeParamDecorator('Optional');\n\n/**\n * Type of the Self decorator / constructor function.\n *\n *\n */\nexport interface SelfDecorator {\n  /**\n   * @usageNotes\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Self() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * Specifies that an {@link Injector} should retrieve a dependency only from itself.\n   *\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   *\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n *\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n *\n * @Annotation\n */\nexport const Self: SelfDecorator = makeParamDecorator('Self');\n\n\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n *\n */\nexport interface SkipSelfDecorator {\n  /**\n   * @usageNotes\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@SkipSelf() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * Specifies that the dependency resolution should start from the parent injector.\n   *\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   *\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the SkipSelf metadata.\n *\n *\n */\nexport interface SkipSelf {}\n\n/**\n * SkipSelf decorator and metadata.\n *\n *\n * @Annotation\n */\nexport const SkipSelf: SkipSelfDecorator = makeParamDecorator('SkipSelf');\n\n/**\n * Type of the Host decorator / constructor function.\n *\n *\n */\nexport interface HostDecorator {\n  /**\n   * @usageNotes\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Host() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * Specifies that an injector should retrieve a dependency from any injector until\n   * reaching the host element of the current component.\n   *\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   *\n   *\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n *\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n *\n * @Annotation\n */\nexport const Host: HostDecorator = makeParamDecorator('Host');\n"]}