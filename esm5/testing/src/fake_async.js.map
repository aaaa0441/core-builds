{"version":3,"file":"fake_async.js","sourceRoot":"","sources":["../../../../../../packages/core/testing/src/fake_async.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,4BAA4B,EAAE,iBAAiB,EAAE,aAAa,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,YAAY,EAAC,MAAM,uBAAuB,CAAC;AAExK,IAAM,KAAK,GAAQ,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AAC7D,IAAM,mBAAmB,GAAG,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;;;;;;;AAQ9E,MAAM;IACJ,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,CAAC;KACjD;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,0BAA0B,EAAE,CAAC;KACrC;CACF;;;;;;;;;;;;;;;;;;;AAoBD,MAAM,oBAAoB,EAAY;IACpC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KAC1C;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;KAC9B;CACF;;;;;;;;;;;;;AAcD,MAAM,eAAe,MAAkB;IAAlB,uBAAA,EAAA,UAAkB;IACrC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACzC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC7B;CACF;;;;;;;;;;;AAYD,MAAM,gBAAgB,QAAiB;IACrC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC5C;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;CACF;;;;;;AAOD,MAAM;IACJ,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,CAAC;KACnD;IAAC,IAAI,CAAC,CAAC;QACN,4BAA4B,EAAE,CAAC;KAChC;CACF;;;;;;AAOD,MAAM;IACJ,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAC;KAC9C;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,uBAAuB,EAAE,CAAC;KAClC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {discardPeriodicTasksFallback, fakeAsyncFallback, flushFallback, flushMicrotasksFallback, resetFakeAsyncZoneFallback, tickFallback} from './fake_async_fallback';\n\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nexport function resetFakeAsyncZone(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  } else {\n    return resetFakeAsyncZoneFallback();\n  }\n}\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  } else {\n    return fakeAsyncFallback(fn);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nexport function tick(millis: number = 0): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis);\n  } else {\n    return tickFallback(millis);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nexport function flush(maxTurns?: number): number {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  } else {\n    return flushFallback(maxTurns);\n  }\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nexport function discardPeriodicTasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  } else {\n    discardPeriodicTasksFallback();\n  }\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nexport function flushMicrotasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  } else {\n    return flushMicrotasksFallback();\n  }\n}\n"]}